
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module slotmachine(

	//////////// CLOCK //////////
	//ADC_CLK_10,
	MAX10_CLK1_50,
	//MAX10_CLK2_50,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	//HEX3,
	//HEX4,
	//HEX5,

	//////////// KEY //////////
	KEY,

	//////////// LED //////////
	//LEDR,

	//////////// SW //////////
	SW
);

	//////////// CLOCK //////////
	//input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50;
	//input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0;
	output		     [7:0]		HEX1;
	output		     [7:0]		HEX2;
	//output		     [7:0]		HEX3;
	//output		     [7:0]		HEX4;
	//output		     [7:0]		HEX5;

	//////////// KEY //////////
	input 		     [1:0]		KEY;

	//////////// LED //////////
	//output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [0:0]		SW;

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire			start;
wire			stop;
wire			clk;
wire			reset;
wire [6:0] 	oSEG0;
wire [6:0]	oSEG1;
wire [6:0]	oSEG2;

wire [3:0]	lfsr_in0;
wire [3:0]	lfsr_in1;
wire [3:0]	lfsr_in2;

wire [3:0]	out0;
wire [3:0]	out1;
wire [3:0]	out2;

wire		enable0;
wire		enable1;
wire		enable2;


//=======================================================
//  PARAMETER Definition
//=======================================================

defparam slot_inst.pIdle 		= 'b00;
defparam slot_inst.pRunning 	= 'b01;
defparam slot_inst.pStopping 	= 'b10;
defparam slot_inst.clk_val 	= 'b100110001001011010000000;
defparam slot_inst.stop_val0 	= 'b00000101111101011110000100000000;
defparam slot_inst.stop_val1 	= 'b00001011111010111100001000000000;
defparam slot_inst.stop_val2 	= 'b00010001111000011010001100000000;

defparam lfsr_inst0.and_val 	= 'b1100;
defparam lfsr_inst0.reset_val = 'b0001;
defparam lfsr_inst1.and_val 	= 'b1100;
defparam lfsr_inst1.reset_val = 'b0010;
defparam lfsr_inst2.and_val 	= 'b1100;
defparam lfsr_inst2.reset_val = 'b0100;

//=======================================================
//  Structural coding
//=======================================================

assign	start = KEY[0];
assign	stop 	= KEY[1];
assign	reset = SW[0];
assign	clk	= MAX10_CLK1_50;

assign	HEX0[6:0] = oSEG0;
assign	HEX1[6:0] = oSEG1;
assign	HEX2[6:0] = oSEG2;

assign	HEX0[7] = 'b1;
assign	HEX1[7] = 'b1;
assign	HEX2[7] = 'b1;

//=======================================================
//	Instanciation of different cores
//=======================================================

slot slot_inst
(
	.start(start) ,			// input  start_sig
	.stop(stop) ,				// input  stop_sig
	.clk(clk) ,					// input  clk_sig
	.reset(reset) ,			// input  reset_sig
	.lfsr_in0(lfsr_in0) ,	// input [3:0] lfsr_in0_sig
	.lfsr_in1(lfsr_in1) ,	// input [3:0] lfsr_in1_sig
	.lfsr_in2(lfsr_in2) ,	// input [3:0] lfsr_in2_sig
	.enable0(enable0) ,		// output  enable0_sig
	.enable1(enable1) ,		// output  enable1_sig
	.enable2(enable2) ,		// output  enable2_sig
	.out0(out0) ,				// output [3:0] out0_sig
	.out1(out1) ,				// output [3:0] out1_sig
	.out2(out2) 				// output [3:0] out2_sig
);

lfsr lfsr_inst0
(
	.clk(clk) ,					// input  clk_sig
	.reset(reset) ,			// input  reset_sig
	.enable(enable0) ,		// input  enable_sig
	.lfsr_out(lfsr_in0) 		// output [3:0] lfsr_out_sig
);

lfsr lfsr_inst1
(
	.clk(clk) ,				// input  clk_sig
	.reset(reset) ,			// input  reset_sig
	.enable(enable1) ,		// input  enable_sig
	.lfsr_out(lfsr_in1) 	// output [3:0] lfsr_out_sig
);

lfsr lfsr_inst2
(
	.clk(clk) ,				// input  clk_sig
	.reset(reset) ,			// input  reset_sig
	.enable(enable2) ,		// input  enable_sig
	.lfsr_out(lfsr_in2) 	// output [3:0] lfsr_out_sig
);

SEG7_LUT SEG7_LUT_inst0
(
	.oSEG(oSEG0) ,	// output [6:0] oSEG_sig
	.iDIG(out2) 	// input [3:0] iDIG_sig
);

SEG7_LUT SEG7_LUT_inst1
(
	.oSEG(oSEG1) ,	// output [6:0] oSEG_sig
	.iDIG(out1) 	// input [3:0] iDIG_sig
);

SEG7_LUT SEG7_LUT_inst2
(
	.oSEG(oSEG2) ,	// output [6:0] oSEG_sig
	.iDIG(out0) 	// input [3:0] iDIG_sig
);

endmodule
