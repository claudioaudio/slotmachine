
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module slotmachine(

	//////////// CLOCK //////////
	//ADC_CLK_10,
	MAX10_CLK1_50,
	//MAX10_CLK2_50,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	//HEX3,
	//HEX4,
	//HEX5,

	//////////// KEY //////////
	KEY,

	//////////// LED //////////
	//LEDR,

	//////////// SW //////////
	SW
);

	//////////// CLOCK //////////
	//input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50;
	//input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0;
	output		     [7:0]		HEX1;
	output		     [7:0]		HEX2;
	//output		     [7:0]		HEX3;
	//output		     [7:0]		HEX4;
	//output		     [7:0]		HEX5;

	//////////// KEY //////////
	input 		     [1:0]		KEY;

	//////////// LED //////////
	//output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [0:0]		SW;



//=======================================================
//  PARAMETER Definition
//=======================================================

parameter lfsr_length = 10;

defparam slot_inst.IDLE = 'b00;
defparam slot_inst.RUNNING = 'b01;
defparam slot_inst.STOPPING = 'b10;
defparam slot_inst.MUX_ADDR0 = 'b00;
defparam slot_inst.MUX_ADDR1 = 'b01;
defparam slot_inst.MUX_ADDR2 = 'b10;
defparam slot_inst.clk_val = 'b100110001001011010000000;
defparam slot_inst.debounce_max = 'b00000000010011000100101101000000;
defparam slot_inst.stop_val0 = 'b00000101111101011110000100000000;
defparam slot_inst.stop_val1 = 'b00001011111010111100001000000000;
defparam slot_inst.stop_val2 = 'b00010001111000011010001100000000;
defparam slot_inst.lfsr_length = lfsr_length;

defparam lfsr_inst.lfsr_length = lfsr_length;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire								start;
wire								stop;
wire								clk;
wire								reset;
wire [6:0] 						oSEG0;
wire [6:0]						oSEG1;
wire [6:0]						oSEG2;

wire [lfsr_length-1 : 0]	lfsr_out;

wire [3:0]						slot_out0;
wire [3:0]						slot_out1;
wire [3:0]						slot_out2;

wire								enable;

wire								rst_out;

reg								rst_ff0;
reg								rst_ff1;
reg								rst_ff2;	

//=======================================================
//  Structural coding
//=======================================================

assign	start = KEY[0];
assign	stop 	= KEY[1];
assign	reset = SW[0];
assign	clk	= MAX10_CLK1_50;

assign	HEX0[6:0] = oSEG0;
assign	HEX1[6:0] = oSEG1;
assign	HEX2[6:0] = oSEG2;

assign	HEX0[7] = 'b1;
assign	HEX1[7] = 'b1;
assign	HEX2[7] = 'b1;

//=======================================================
//  Reset Synchronisation
//=======================================================

always @ (posedge clk)
begin: RESET_SYNCH
	rst_ff0 <= reset;
	rst_ff1 <= rst_ff0;
	rst_ff2 <= rst_ff1 && rst_ff0;
end

assign	rst_out = rst_ff2;

//=======================================================
//	Instanciation of different cores
//=======================================================

slot slot_inst
(
	.start(start) ,	// input  start_sig
	.stop(stop) ,	// input  stop_sig
	.clk(clk) ,	// input  clk_sig
	.reset(rst_out) ,	// input  reset_sig
	.lfsr_in(lfsr_out) ,	// input [lfsr_length-1:0] lfsr_in_sig
	.slot_out0(slot_out0) ,	// output [3:0] slot_out0_sig
	.slot_out1(slot_out1) ,	// output [3:0] slot_out1_sig
	.slot_out2(slot_out2) 	// output [3:0] slot_out2_sig
);

lfsr lfsr_inst
(
	.clk(clk) ,	// input  clk_sig
	.reset(rst_out) ,	// input  reset_sig
	.lfsr_out(lfsr_out) 	// output [lfsr_length-1:0] lfsr_out_sig
);

SEG7_LUT SEG7_LUT_inst0
(
	.oSEG(oSEG0) ,	// output [6:0] oSEG_sig
	.iDIG(slot_out2) 	// input [3:0] iDIG_sig
);

SEG7_LUT SEG7_LUT_inst1
(
	.oSEG(oSEG1) ,	// output [6:0] oSEG_sig
	.iDIG(slot_out1) 	// input [3:0] iDIG_sig
);

SEG7_LUT SEG7_LUT_inst2
(
	.oSEG(oSEG2) ,	// output [6:0] oSEG_sig
	.iDIG(slot_out0) 	// input [3:0] iDIG_sig
);

endmodule
